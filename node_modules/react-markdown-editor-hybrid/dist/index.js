'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMarkdown = require('react-markdown');

var _reactMarkdown2 = _interopRequireDefault(_reactMarkdown);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MDEditor = _react2.default.createClass({
  displayName: 'MDEditor',
  getDefaultProps: function getDefaultProps() {
    return {
      enableHTML: true,
      textAreaStyle: {},
      buttonStyle: {},
      buttonContainerStyle: {}
    };
  },

  propTypes: {
    value: _react2.default.PropTypes.string.isRequired,
    enableHTML: _react2.default.PropTypes.bool,
    onChange: _react2.default.PropTypes.func.isRequired,
    textAreaStyle: _react2.default.PropTypes.object,
    buttonStyle: _react2.default.PropTypes.object,
    buttonContainerStyle: _react2.default.PropTypes.object
  },
  getInitialState: function getInitialState() {
    return {
      preview: false
    };
  },
  setCaretPosition: function setCaretPosition(caretPos) {
    var textarea = this.refs.text;
    if (textarea !== null) {
      if (textarea.createTextRange) {
        var range = textarea.createTextRange();
        range.move('character', caretPos);
        range.select();
      } else {
        if (textarea.selectionStart) {
          textarea.focus();
          textarea.setSelectionRange(caretPos, caretPos);
        } else {
          textarea.focus();
        }
      }
    }
  },
  getSelection: function getSelection(value) {
    var cursorIndexStart = this.refs.text.selectionStart;
    var cursorIndexEnd = this.refs.text.selectionEnd;
    var selection = value.substring(cursorIndexStart, cursorIndexEnd);
    return {
      cursorIndexStart: cursorIndexStart,
      cursorIndexEnd: cursorIndexEnd,
      selection: selection
    };
  },
  insertAtCursor: function insertAtCursor(e, markdownLeftOrLR, right, _selection, markdownRight, cursorPosOffset) {
    var _this = this;

    if (e) {
      e.preventDefault();
    }
    var value = this.props.value;
    var selectionProps = this.getSelection(value);
    var cursorIndexStart = selectionProps.cursorIndexStart;
    var cursorIndexEnd = selectionProps.cursorIndexEnd;
    var selection = _selection ? _selection : selectionProps.selection;
    value = value.substring(0, cursorIndexStart) + ('' + markdownLeftOrLR + (selection.length > 0 ? selection : '') + (right ? markdownRight ? markdownRight : markdownLeftOrLR : '')) + value.substring(cursorIndexEnd, value.length);
    this.props.onChange(value);
    if (selection.length === 0) {
      setTimeout(function () {
        _this.setCaretPosition(cursorIndexStart + markdownRight ? cursorIndexEnd + cursorPosOffset : markdownLeftOrLR.length);
      }, 0);
    }
  },
  handleList: function handleList(e, ordered) {
    e.preventDefault();
    var list = this.getSelection(this.props.value).selection.split(/\r?\n/);
    var newList = [];
    for (var i = 0; i < list.length; i++) {
      if (list[i].length > 0) {
        newList.push((ordered ? i + 1 + '.' : '-') + ' ' + list[i]);
      }
    }
    newList = newList.join('\n');
    this.insertAtCursor(null, '', false, newList);
  },
  handleYoutube: function handleYoutube(e) {
    e.preventDefault();
    var url = prompt('Enter a YouTube URL.');
    var videoId = url.match(/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&]+)/);
    if (videoId === null) {
      return;
    }
    this.insertAtCursor(null, '[![](https://img.youtube.com/vi/' + videoId[1] + '/0.jpg)](https://www.youtube.com/watch?v=' + videoId[1], true, null, ')', 4);
  },
  handleTogglePreview: function handleTogglePreview(e) {
    e.preventDefault();
    this.setState({ preview: !this.state.preview });
  },
  handleTextChange: function handleTextChange(e) {
    this.props.onChange(e.target.value);
  },

  render: function render() {
    var _this2 = this;

    var p = this.props;
    var s = this.state;
    var textAreaStyle = {
      width: '100%',
      outline: '0',
      border: '1px solid #cccccc',
      height: '500px',
      padding: '4px 8px'
    };
    (0, _objectAssign2.default)(textAreaStyle, p.textAreaStyle);
    var buttonStyle = {
      outline: '0',
      border: '1px solid #cccccc',
      margin: '0px 2px',
      padding: '4px 8px',
      cursor: 'pointer',
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: '#FFF',
      marginLeft: '4px',
      lineHeight: '1'
    };
    (0, _objectAssign2.default)(buttonStyle, p.buttonStyle);
    var buttonContainerStyle = {
      marginLeft: '-4px',
      marginBottom: '4px'
    };
    (0, _objectAssign2.default)(buttonContainerStyle, p.buttonContainerStyle);
    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'div',
        { style: buttonContainerStyle },
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: function onClick(e) {
              return _this2.insertAtCursor(e, '**', true);
            } },
          _react2.default.createElement('i', { className: 'fa fa-bold' })
        ),
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: function onClick(e) {
              return _this2.insertAtCursor(e, '_', true);
            } },
          _react2.default.createElement('i', { className: 'fa fa-italic' })
        ),
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: function onClick(e) {
              return _this2.insertAtCursor(e, '### ', false);
            } },
          _react2.default.createElement('i', { className: 'fa fa-header' })
        ),
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: function onClick(e) {
              return _this2.handleList(e, false);
            } },
          _react2.default.createElement('i', { className: 'fa fa-list' })
        ),
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: function onClick(e) {
              return _this2.handleList(e, true);
            } },
          _react2.default.createElement('i', { className: 'fa fa-list-ol' })
        ),
        p.enableHTML ? _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: function onClick(e) {
              return _this2.insertAtCursor(e, '<blockquote>', true, null, '</blockquote>', 12);
            } },
          _react2.default.createElement('i', { className: 'fa fa-quote-right' })
        ) : null,
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: function onClick(e) {
              return _this2.insertAtCursor(e, '```', true, null, '```', 3);
            } },
          _react2.default.createElement('i', { className: 'fa fa-code' })
        ),
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: function onClick(e) {
              return _this2.insertAtCursor(e, '[', true, null, ']()', 3);
            } },
          _react2.default.createElement('i', { className: 'fa fa-link' })
        ),
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: function onClick(e) {
              return _this2.insertAtCursor(e, '![](', true, null, ')', 4);
            } },
          _react2.default.createElement('i', { className: 'fa fa-file-image-o' })
        ),
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: this.handleYoutube },
          _react2.default.createElement('i', { className: 'fa fa-youtube' })
        ),
        _react2.default.createElement(
          'button',
          { style: buttonStyle, onClick: this.handleTogglePreview },
          _react2.default.createElement('i', { className: 'fa fa-' + (s.preview ? 'pencil' : 'eye') }),
          _react2.default.createElement(
            'span',
            { style: { marginLeft: '6px' } },
            s.preview ? 'Editor' : 'Preview'
          )
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        s.preview ? _react2.default.createElement(_reactMarkdown2.default, { source: p.value, escapeHtml: !p.enableHTML }) : _react2.default.createElement('textarea', { ref: 'text', style: textAreaStyle, value: p.value, onChange: this.handleTextChange, placeholder: 'Use Markdown ' + (p.enableHTML ? 'or HTML ' : '') + 'for formatting...' })
      )
    );
  }
});

window.MDEditor = MDEditor;
exports.default = MDEditor;